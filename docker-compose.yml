version: '3.8'
services:
  app:
    container_name: react-app # Nom du conteneur
    build:
      context: . # Dossier de build (le dossier courant dans notre cas)
      dockerfile: Dockerfile # Fichier de build (Dockerfile dans notre cas, on pourrait aussi utiliser Dockerfile.dev pour un environnement de développement)
    ports:
      - 3000:3000 # Port d'écoute de l'application React (3000:3000 par défaut)
    volumes:
      - .:/var/www/html # Volume pour tout le projet
      - /var/www/html/app/node_modules # Volume pour les modules node_modules (pour éviter de les installer dans le conteneur)
    env_file:
      - .env # Utilisation du fichier .env pour les variables d'environnement
    depends_on:
      - database # Dépendance au conteneur de la base de données
      - mailhog # Dépendance au conteneur de MailHog
    #user: node # Utilisateur node pour le conteneur de l'application React (non utilisé dans notre cas, problème de permissions npm)

  database:
    container_name: database # Nom du conteneur
    image: mysql:5.7
    volumes:
      - database_data:/var/lib/mysql # Volume pour les données de MySQL
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql # Script SQL d'initialisation de la base de données depuis le fichier init-db.sql
    ports:
      - 3310:3306 # Port d'écoute de MySQL (3310:3306 pour éviter les conflits avec une éventuelle installation locale de MySQL -> 3306:3306 par défaut)
    env_file:
      - .env # Utilisation du fichier .env pour les variables d'environnement

  mailhog:
    container_name: mailhog # Nom du conteneur
    image: mailhog/mailhog # Image Docker de MailHog
    ports:
      - 8025:8025 # Port d'écoute de MailHog (8025:8025 par défaut)

volumes:
  database_data: {} # Volume pour les données de MySQL
